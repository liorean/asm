     1                                  ; "%ASMROOT%\win64\examples\000 The Basics\helloworld.asm"
     2                                  ;
     3                                  ; for compilation with the NASM assembler
     4                                  ;
     5                                  ; nasm -o helloworld.obj -l helloworld.lst -f win64 helloworld.asm
     6                                  ; golink /console /ni /entry main helloworld.obj kernel32.dll user32.dll gdi32.dll msvcrt.dll comctl32.dll comdlg32.dll oleaut32.dll hhctrl.ocx winspool.drv shell32.dll
     7                                  
     8                                  ;Image setup
     9                                  bits 64
    10                                  default rel
    11                                  global main
    12                                  
    13                                  ;Linkage
    14                                  extern GetStdHandle     ;   From kernel32.dll
    15                                  extern WriteFile        ;   From kernel32.dll
    16                                  extern ExitProcess      ;   From kernel32.dll
    17                                  
    18                                  section .data use64
    19 00000000 48656C6C6F20576F72-         msg:                db      "Hello World!",0xd,0xa
    20 00000009 6C64210D0A         
    21                                      msglen:             equ     $-msg
    22                                      zero:               equ     0x0
    23                                      STD_OUTPUT_HANDLE:  equ     -11
    24                                  
    25                                  section .bss use64
    26 00000000 <res 00000008>              hStdOutput  resq    0x1
    27 00000008 <res 00000008>              hNum        resq    0x1
    28                                  
    29                                  section .text use64
    30                                  main: ; int main(int argc, char *argv[], char *envp[])
    31                                  .prolog:
    32 00000000 4883EC28                    sub rsp, 0x8*0x4+0x8 ; register spill 4 * 8 + highest stack argument number
    33                                      ; need to be an odd number of 8 byte adds, +rip makes it align at 16 bytes
    34                                  .body:
    35                                      ; *hStdOutput = GetStdHandle(STD_OUTPUT_HANDLE);
    36 00000004 48C7C1F5FFFFFF              mov rcx, STD_OUTPUT_HANDLE
    37 0000000B E8(00000000)                call GetStdHandle
    38 00000010 488905(00000000)            mov qword [hStdOutput], rax
    39                                      
    40                                      ; WriteFile(*hStdOutput, *msg, msglen, *hNum, NULL)
    41 00000017 488B0D(00000000)            mov rcx, qword [hStdOutput]
    42 0000001E 48BA-                       mov rdx, msg
    43 00000020 [0000000000000000] 
    44 00000028 41B80E000000                mov r8d, msglen ; r8d instead of r8 since zero extension workd for us
    45 0000002E 49B9-                       mov r9, hNum
    46 00000030 [0800000000000000] 
    47 00000038 48C744242000000000          mov qword [rsp+0x20], zero ; fifth argument and on are passed on the stack
    48 00000041 E8(00000000)                call WriteFile
    49                                  
    50                                      ; ExitProcess ( 0 )
    51 00000046 B900000000                  mov ecx, zero ; ecx instead of rcx since zero extension works for us
    52 0000004B E8(00000000)                call ExitProcess
    53                                  
    54                                      ; return 0
    55 00000050 31C0                        xor eax, eax
    56                                  .epilog:
    57 00000052 4883C428                    add rsp, 0x8*0x4+0x8
    58 00000056 C3                          ret
    59                                  .end:
    60                                   
    61                                  ; Win64 Windows API x64 Structured Exception Handling (SEH) - procedure data
    62                                  section .pdata  rdata align=4 use64
    63                                      pmain:
    64 00000000 [00000000]                  .start: dd      main     wrt ..imagebase 
    65 00000004 [57000000]                  .end:   dd      main.end wrt ..imagebase 
    66 00000008 [00000000]                  .info:  dd      xmain    wrt ..imagebase 
    67                                  
    68                                  ; Win64 Windows API x64 Structured Exception Handling (SEH) - unwind information
    69                                  section .xdata  rdata align=8 use64
    70                                      xmain:
    71                                      .versionandflags:
    72 00000000 20                                  db      0x1 << 0x5 + 0x0 ; Version = 1, UNW_FLAG_NHANDLER flag
    73 00000001 04                          .size:  db      main.body-main.prolog ; size of prolog that is
    74 00000002 01                          .count: db      0x1 ; Only one unwind code
    75 00000003 00                          .frame: db      0x0 ; Zero if no frame pointer taken
    76 00000004 04                          .codes: db      main.body-main.prolog ; offset of next instruction
    77 00000005 24                                  db      0x24 ; UWOP_ALLOC_SMALL with 4*8+8 bytes
    78 00000006 0000                                db      0x0,0x0 ; Unused record to bring the number to be even
